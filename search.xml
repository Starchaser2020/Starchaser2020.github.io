<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JAVASCRIPT基础</title>
      <link href="2021/01/22/JAVASCRIPT%E5%9F%BA%E7%A1%80/"/>
      <url>2021/01/22/JAVASCRIPT%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="JavaScript是什么"><a href="#JavaScript是什么" class="headerlink" title="JavaScript是什么?"></a>JavaScript是什么?</h2><p>简单来说:JavaScript是一种”脚本”语言,用于构件更加动态和生动的网页.</p><h2 id="JavaScript为什么会出现"><a href="#JavaScript为什么会出现" class="headerlink" title="JavaScript为什么会出现?"></a>JavaScript为什么会出现?</h2><p>理由如上,HTML和CSS决定网页的表现形式,但是是静态的,如果需要人与屏幕更好的交互就需要一个脚本语言响应用户动作.</p><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h3><p>script代码可以写在html中的<code>&lt;script&gt;</code>标签中,例如:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>script 标签之前...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    alert(<span class="string">&#x27;Hello, world!&#x27;</span>);</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>...script 标签之后<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上述代码会使浏览器弹出”hello world!”,这就是用户动作-&gt;浏览器响应</p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>声明变量:<code>let 变量名</code></p><p>变量赋值:<code>变量名=值</code></p><p>变量命名的规则:</p><ul><li>变量名称必须仅包含字母,数字,下划线;</li><li>变量名不能以数字开头.</li></ul><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>JavaScript是一种”动态语言”,即先给变量赋值数值,之后也可以再给该变量复制数字.(那么动态复制的背后是什么逻辑呢?)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">graph LR;</span><br><span class="line">A(对象)--&gt;B1(Number类型)</span><br><span class="line">A--&gt;B2(BigInt类型)---存储太大的整数</span><br><span class="line">A--&gt;B3(String类型)</span><br><span class="line">A--&gt;B4(Boolean类型)</span><br><span class="line">A--&gt;B5(&quot;null&quot;值)---表示&#39;空&#39;,&#39;无&#39;</span><br><span class="line">A--&gt;B6(&quot;undefined&quot;值)---未被赋值</span><br><span class="line">A--&gt;B7(object类型)</span><br><span class="line">A--&gt;B8(symbol类型)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="交互-alert-prompt和confirm"><a href="#交互-alert-prompt和confirm" class="headerlink" title="交互:alert,prompt和confirm"></a>交互:alert,prompt和confirm</h3><p>alert—浏览器提示;<br>prompt—result = prompt(title,[default]),浏览器会显示一个带有文本消息的模态窗口，还有 input 框和确定/取消按钮。<br>confirm–result=confirm(question),confirm 函数显示一个带有 question 以及确定和取消两个按钮的模态窗口。</p><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><ol><li><p>字符串转换</p><p> String(value)转换为字符串</p></li><li><p>数字型转换</p><ul><li><p>算术表达式或者函数中,自动进行数字转换,如:”6” / “2” 将字符串转换为Number类型</p></li><li><p>显示数字转换Number(value):</p><table><thead><tr><th>值</th><th>变成</th></tr></thead><tbody><tr><td>null</td><td>0</td></tr><tr><td>undefined</td><td>NaN</td></tr><tr><td>true or false</td><td>1 or 0</td></tr><tr><td>string</td><td>去掉首尾空格后的纯数字字符串中含有的数字。如果剩余字符串为空，则转换结果为 0。否则，将会从剩余字符串中“读取”数字。当类型转换出现 error 时返回 NaN。</td></tr></tbody></table></li></ul></li><li><p>布尔类型转换</p><ul><li>直观上为“空”的值（如 0、空字符串、null、undefined 和 NaN）将变为 false。</li><li>其他值变成 true。</li></ul></li></ol><h3 id="基础运算符-数学"><a href="#基础运算符-数学" class="headerlink" title="基础运算符,数学"></a>基础运算符,数学</h3><h4 id="常用术语"><a href="#常用术语" class="headerlink" title="常用术语"></a>常用术语</h4><ul><li>运算元 —— 运算符应用的对象。比如说乘法运算 5 * 2，有两个运算元：左运算元 5 和右运算元 2。有时候人们也称其为“参数”而不是“运算元”;</li><li>如果一个运算符对应的只有一个运算元，那么它是 一元运算符。比如说一元负号运算符（unary negation）-，它的作用是对数字进行正负转换：</li><li>如果一个运算符拥有两个运算元，那么它是 二元运算符。减号还存在二元运算符形式：</li></ul><h4 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h4><ul><li><p>加法(+)</p><ul><li><p>用于number类型相加</p></li><li><p>用于字符串相加,特别的当其中一个为字符串时,另一个运算元也会自动转换为字符串,但其他运算元没有这种特点.如</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="number">1</span>+<span class="string">&#x27;1&#x27;</span>); <span class="comment">//11</span></span><br><span class="line">alert(<span class="number">1</span>-<span class="string">&#x27;1&#x27;</span>); <span class="comment">//0</span></span><br></pre></td></tr></table></figure></li><li><p>除了上述的两元运算符,’+’也是一元运算符,加号 + 应用于单个值，对数字没有任何作用。但是如果运算元不是数字，加号 + 则会将其转化为数字.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="number">1</span> + +<span class="string">&#x27;1&#x27;</span>); <span class="comment">//2</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>减法(-);</p></li><li><p>乘法(*);</p></li><li><p>除法(/);</p></li><li><p>取余(%);</p></li><li><p>求幂(**).</p></li></ul><h4 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h4><p>类似于四则运算的除法,乘法优先级高于加法,减法.计算机运算符也有优先级之分:一元运算符大于二元运算符,等于运算符优先级较低.具体可以参考<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence">Mozilla优先级表</a></p><h4 id="原地修改"><a href="#原地修改" class="headerlink" title="原地修改"></a>原地修改</h4><p>我们经常需要对一个变量做运算，并将新的结果存储在同一个变量中;</p><p>优先级与<code>=</code>相同,都是在其他运算完成后进行.</p><h4 id="自增-自减"><a href="#自增-自减" class="headerlink" title="自增/自减"></a>自增/自减</h4><ul><li>自增 ++ 将变量与 1 相加</li><li>自减 – 将变量与 1 相减</li></ul><p><strong>在 JavaScript 中，大多数运算符都会返回一个值。这对于 + 和 - 来说是显而易见</strong></p><pre><code>++value和value--的区别:前者返回value+1并且value+1,后者返回value并且value-1</code></pre><h4 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h4><p>位运算符把运算元当做 32 位整数，并在它们的二进制表现形式上操作。</p><ul><li>按位与 ( &amp; )</li><li>按位或 ( | )</li><li>按位异或 ( ^ )</li><li>按位非 ( ~ )</li><li>左移 ( &lt;&lt; )</li><li>右移 ( &gt;&gt; )</li><li>无符号右移 ( &gt;&gt;&gt; )</li></ul><h4 id="逗号运算符"><a href="#逗号运算符" class="headerlink" title="逗号运算符"></a>逗号运算符</h4><p>逗号运算符能让我们处理多个语句，使用 , 将它们分开。每个语句都运行了，但是只有最后的语句的结果会被返回。</p><h3 id="值的比较"><a href="#值的比较" class="headerlink" title="值的比较"></a>值的比较</h3><ul><li>大于 / 小于：a &gt; b，a &lt; b;</li><li>大于等于 / 小于等于：a &gt;= b，a &lt;= b。</li><li>检查两个值的相等：a == b，请注意双等号 == 表示相等性检查，而单等号 a = b 表示赋值。</li><li>检查两个值不相等。不相等在数学中的符号是 ≠，但在 JavaScript 中写成 a != b。</li></ul><h4 id="比较的结果是Boolean类型"><a href="#比较的结果是Boolean类型" class="headerlink" title="比较的结果是Boolean类型"></a>比较的结果是Boolean类型</h4><h4 id="字符串大小比较"><a href="#字符串大小比较" class="headerlink" title="字符串大小比较"></a>字符串大小比较</h4><ol><li>首先比较两个字符串的首位字符大小。</li><li>如果一方字符较大（或较小），则该字符串大于（或小于）另一个字符串。算法结束。</li><li>否则，如果两个字符串的首位字符相等，则继续取出两个字符串各自的后一位字符进行比较。</li><li>重复上述步骤进行比较，直到比较完成某字符串的所有字符为止。</li><li>如果两个字符串的字符同时用完，那么则判定它们相等，否则未结束（还有未比较的字符）的字符串更大。</li></ol><h4 id="不同类型间的比较"><a href="#不同类型间的比较" class="headerlink" title="不同类型间的比较"></a>不同类型间的比较</h4><p>当对不同类型的值进行比较时，JavaScript 会首先将其转化为数字（number）再判定大小。<br>对于布尔类型值，true 会被转化为 1、false 转化为 0。</p><h4 id="严格相等"><a href="#严格相等" class="headerlink" title="严格相等"></a>严格相等</h4><p>普通的相等性检查 == 存在一个问题，它不能区分出 0 和 false,无法区分空字符串和 false.</p><p>严格相等运算符 === 在进行比较时不会做任何的类型转换。</p><h4 id="对-null-和-undefined-进行比较"><a href="#对-null-和-undefined-进行比较" class="headerlink" title="对 null 和 undefined 进行比较"></a>对 null 和 undefined 进行比较</h4><ul><li><strong>当使用严格相等 === 比较二者时它们不相等，因为它们属于不同的类型</strong></li><li><strong>使用非严格相等 == 比较二者时,二者相等</strong></li><li><strong>当使用数学式或其他比较方法 &lt; &gt; &lt;= &gt;= 时：null/undefined 会被转化为数字：null 被转化为 0，undefined 被转化为 NaN。</strong></li></ul><h3 id="条件分支-if和”-”"><a href="#条件分支-if和”-”" class="headerlink" title="条件分支:if和”?”"></a>条件分支:if和”?”</h3><h4 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">if</span>(<span class="params">条件语句</span>)</span>&#123;执行语句&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="function"><span class="title">if</span>(<span class="params">条件语句</span>)</span>&#123;执行语句&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;执行语句&#125;</span><br></pre></td></tr></table></figure><p>上述代码中<code>else if</code>和<code>else</code>都不是必须的.</p><h4 id="运算符"><a href="#运算符" class="headerlink" title="?运算符"></a>?运算符</h4><p><code>?</code>是唯一一个三元运算符,可以给变量赋值:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = condition ? value1 : value2;</span><br></pre></td></tr></table></figure><p>本质上是if-else语句的简写:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result;</span><br><span class="line"><span class="function"><span class="title">if</span>(<span class="params">condition</span>)</span>&#123;result = value1&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;result = value2&#125;</span><br></pre></td></tr></table></figure><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>JavaScript 中有三个逻辑运算符：||（或），&amp;&amp;（与），!（非）。</p><h4 id="或"><a href="#或" class="headerlink" title="||(或)"></a><code>||</code>(或)</h4><h5 id="或运算寻找第一个真值"><a href="#或运算寻找第一个真值" class="headerlink" title="或运算寻找第一个真值"></a>或运算寻找第一个真值</h5><p><code>result = value1 || value2 || value3;</code></p><p>或运算符 || 做了如下的事情：</p><ul><li>从左到右依次计算操作数。</li><li>处理每一个操作数时，都将其转化为布尔值。如果结果是 true，就停止计算，返回这个操作数的初始值。</li><li>如果所有的操作数都被计算过（也就是，转换结果都是 false），则返回最后一个操作数。</li></ul><p>因此,<code>||</code>运算符在JavaScript中产生了新用法</p><ol><li><p>获取变量列表或者表达式中的第一个真值.</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> firstName = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> lastName = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> nickName = <span class="string">&quot;SuperCoder&quot;</span>;</span><br><span class="line">alert( firstName || lastName || nickName || <span class="string">&quot;Anonymous&quot;</span>); <span class="comment">// SuperCoder</span></span><br></pre></td></tr></table></figure><p> 如果所有变量的值都为假，结果就是 “Anonymous”。</p><p> <code>alert( alert(1) || 2 || alert(3) );</code><br> 以上代码先返回1,再返回2;</p><ol><li>首先调用<code>alert(1)</code>;</li><li>其次<code>alert</code>没有返回值,寻找下一个值为2.</li></ol></li><li><p>短路求值（Short-circuit evaluation）.<br><code>||</code> 对其参数进行处理，直到达到第一个真值，然后立即返回该值，而无需处理其他参数。</p></li></ol><h4 id="amp-amp-（与）"><a href="#amp-amp-（与）" class="headerlink" title="&amp;&amp;（与）"></a>&amp;&amp;（与）</h4><h5 id="与运算寻找第一个假值"><a href="#与运算寻找第一个假值" class="headerlink" title="与运算寻找第一个假值"></a>与运算寻找第一个假值</h5><p><code>result = value1 &amp;&amp; value2 &amp;&amp; value3;</code></p><p>与运算 &amp;&amp; 做了如下的事：</p><ul><li>从左到右依次计算操作数。</li><li>在处理每一个操作数时，都将其转化为布尔值。如果结果是 false，就停止计算，并返回这个操作数的初始值。</li><li>如果所有的操作数都被计算过（例如都是真值），则返回最后一个操作数。</li></ul><h4 id="非"><a href="#非" class="headerlink" title="!(非)"></a>!(非)</h4><p><code>result = !value;</code></p><p>逻辑非运算符接受一个参数，并按如下运作：</p><ol><li>将操作数转化为布尔类型：true/false。</li><li>返回相反的值。</li></ol><h4 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h4><p><code>!&gt;&amp;&amp;&gt;||</code></p><h3 id="空值合并运算符-‘-’"><a href="#空值合并运算符-‘-’" class="headerlink" title="空值合并运算符 ‘??’"></a>空值合并运算符 ‘??’</h3><p>a ?? b 的结果是：</p><ul><li>如果 a 是已定义的，则结果为 a,</li><li>如果 a 不是已定义的，则结果为 b.</li></ul><p>利用现有代码重写:<br><code>result = (a != null &amp;&amp; a != undefined)? a : b</code></p><p>通常用法是给可能是未定义的变量提供一个默认值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> username;</span><br><span class="line">alert(username || <span class="string">&quot;Anonymous&quot;</span>); <span class="comment">//Anonymous</span></span><br></pre></td></tr></table></figure><h4 id="与-的区别"><a href="#与-的区别" class="headerlink" title="||与??的区别"></a>||与??的区别</h4><p><code>||</code>返回第一个真值;<br><code>??</code>返回第一个定义值;</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> height = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">alert(height || <span class="number">100</span>); <span class="comment">// 100</span></span><br><span class="line">alert(height ?? <span class="number">100</span>); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><h3 id="循环：while-和-for"><a href="#循环：while-和-for" class="headerlink" title="循环：while 和 for"></a>循环：while 和 for</h3><p><strong>循环</strong>是一种重复运行同一代码的方法.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (condition) &#123;</span><br><span class="line">  <span class="comment">// 代码</span></span><br><span class="line">  <span class="comment">// 所谓的“循环体”</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>condition可以是表达式也可以是变量</em></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
